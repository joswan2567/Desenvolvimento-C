ARM GAS  /tmp/cc6fvNvz.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.section	.rodata.str1.4,"aMS",%progbits,1
  15              		.align	2
  16              	.LC0:
  17 0000 64656661 		.ascii	"defaultTask\000"
  17      756C7454 
  17      61736B00 
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_GPIO_Init,"ax",%progbits
  22              		.align	1
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	MX_GPIO_Init:
  28              	.LFB72:
  29              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* USER CODE END Includes */
ARM GAS  /tmp/cc6fvNvz.s 			page 2


  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** osThreadId defaultTaskHandle;
  45:Core/Src/main.c **** /* USER CODE BEGIN PV */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PV */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  50:Core/Src/main.c **** void SystemClock_Config(void);
  51:Core/Src/main.c **** static void MX_GPIO_Init(void);
  52:Core/Src/main.c **** void StartDefaultTask(void const * argument);
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* USER CODE END PFP */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  59:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* USER CODE END 0 */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /**
  64:Core/Src/main.c ****   * @brief  The application entry point.
  65:Core/Src/main.c ****   * @retval int
  66:Core/Src/main.c ****   */
  67:Core/Src/main.c **** int main(void)
  68:Core/Src/main.c **** {
  69:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c ****   /* USER CODE END 1 */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  74:Core/Src/main.c **** 
  75:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  76:Core/Src/main.c ****   HAL_Init();
  77:Core/Src/main.c **** 
  78:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* USER CODE END Init */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c ****   /* Configure the system clock */
  83:Core/Src/main.c ****   SystemClock_Config();
  84:Core/Src/main.c **** 
ARM GAS  /tmp/cc6fvNvz.s 			page 3


  85:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* USER CODE END SysInit */
  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   /* Initialize all configured peripherals */
  90:Core/Src/main.c ****   MX_GPIO_Init();
  91:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE END 2 */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
  96:Core/Src/main.c ****   /* add mutexes, ... */
  97:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 100:Core/Src/main.c ****   /* add semaphores, ... */
 101:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 104:Core/Src/main.c ****   /* start timers, add new ones, ... */
 105:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 108:Core/Src/main.c ****   /* add queues, ... */
 109:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* Create the thread(s) */
 112:Core/Src/main.c ****   /* definition and creation of defaultTask */
 113:Core/Src/main.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 114:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 117:Core/Src/main.c ****   /* add threads, ... */
 118:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   /* Start scheduler */
 121:Core/Src/main.c ****   osKernelStart();
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 124:Core/Src/main.c ****   /* Infinite loop */
 125:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 126:Core/Src/main.c ****   while (1)
 127:Core/Src/main.c ****   {
 128:Core/Src/main.c ****     /* USER CODE END WHILE */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 131:Core/Src/main.c ****   }
 132:Core/Src/main.c ****   /* USER CODE END 3 */
 133:Core/Src/main.c **** }
 134:Core/Src/main.c **** 
 135:Core/Src/main.c **** /**
 136:Core/Src/main.c ****   * @brief System Clock Configuration
 137:Core/Src/main.c ****   * @retval None
 138:Core/Src/main.c ****   */
 139:Core/Src/main.c **** void SystemClock_Config(void)
 140:Core/Src/main.c **** {
 141:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
ARM GAS  /tmp/cc6fvNvz.s 			page 4


 142:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 145:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 146:Core/Src/main.c ****   */
 147:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 148:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 149:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 150:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 151:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 152:Core/Src/main.c ****   {
 153:Core/Src/main.c ****     Error_Handler();
 154:Core/Src/main.c ****   }
 155:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 156:Core/Src/main.c ****   */
 157:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 158:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 159:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 160:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 161:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 162:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 165:Core/Src/main.c ****   {
 166:Core/Src/main.c ****     Error_Handler();
 167:Core/Src/main.c ****   }
 168:Core/Src/main.c **** }
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** /**
 171:Core/Src/main.c ****   * @brief GPIO Initialization Function
 172:Core/Src/main.c ****   * @param None
 173:Core/Src/main.c ****   * @retval None
 174:Core/Src/main.c ****   */
 175:Core/Src/main.c **** static void MX_GPIO_Init(void)
 176:Core/Src/main.c **** {
  30              		.loc 1 176 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 32
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34 0000 10B5     		push	{r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39 0002 88B0     		sub	sp, sp, #32
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 40
 177:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 177 3 view .LVU1
  43              		.loc 1 177 20 is_stmt 0 view .LVU2
  44 0004 0023     		movs	r3, #0
  45 0006 0493     		str	r3, [sp, #16]
  46 0008 0593     		str	r3, [sp, #20]
  47 000a 0693     		str	r3, [sp, #24]
  48 000c 0793     		str	r3, [sp, #28]
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
ARM GAS  /tmp/cc6fvNvz.s 			page 5


 180:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 180 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 180 3 view .LVU4
  52              		.loc 1 180 3 view .LVU5
  53 000e 03F18043 		add	r3, r3, #1073741824
  54 0012 03F50433 		add	r3, r3, #135168
  55 0016 9A69     		ldr	r2, [r3, #24]
  56 0018 42F01002 		orr	r2, r2, #16
  57 001c 9A61     		str	r2, [r3, #24]
  58              		.loc 1 180 3 view .LVU6
  59 001e 9A69     		ldr	r2, [r3, #24]
  60 0020 02F01002 		and	r2, r2, #16
  61 0024 0092     		str	r2, [sp]
  62              		.loc 1 180 3 view .LVU7
  63 0026 009A     		ldr	r2, [sp]
  64              	.LBE4:
  65              		.loc 1 180 3 view .LVU8
 181:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  66              		.loc 1 181 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 181 3 view .LVU10
  69              		.loc 1 181 3 view .LVU11
  70 0028 9A69     		ldr	r2, [r3, #24]
  71 002a 42F02002 		orr	r2, r2, #32
  72 002e 9A61     		str	r2, [r3, #24]
  73              		.loc 1 181 3 view .LVU12
  74 0030 9A69     		ldr	r2, [r3, #24]
  75 0032 02F02002 		and	r2, r2, #32
  76 0036 0192     		str	r2, [sp, #4]
  77              		.loc 1 181 3 view .LVU13
  78 0038 019A     		ldr	r2, [sp, #4]
  79              	.LBE5:
  80              		.loc 1 181 3 view .LVU14
 182:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  81              		.loc 1 182 3 view .LVU15
  82              	.LBB6:
  83              		.loc 1 182 3 view .LVU16
  84              		.loc 1 182 3 view .LVU17
  85 003a 9A69     		ldr	r2, [r3, #24]
  86 003c 42F00402 		orr	r2, r2, #4
  87 0040 9A61     		str	r2, [r3, #24]
  88              		.loc 1 182 3 view .LVU18
  89 0042 9A69     		ldr	r2, [r3, #24]
  90 0044 02F00402 		and	r2, r2, #4
  91 0048 0292     		str	r2, [sp, #8]
  92              		.loc 1 182 3 view .LVU19
  93 004a 029A     		ldr	r2, [sp, #8]
  94              	.LBE6:
  95              		.loc 1 182 3 view .LVU20
 183:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  96              		.loc 1 183 3 view .LVU21
  97              	.LBB7:
  98              		.loc 1 183 3 view .LVU22
  99              		.loc 1 183 3 view .LVU23
 100 004c 9A69     		ldr	r2, [r3, #24]
 101 004e 42F00802 		orr	r2, r2, #8
ARM GAS  /tmp/cc6fvNvz.s 			page 6


 102 0052 9A61     		str	r2, [r3, #24]
 103              		.loc 1 183 3 view .LVU24
 104 0054 9B69     		ldr	r3, [r3, #24]
 105 0056 03F00803 		and	r3, r3, #8
 106 005a 0393     		str	r3, [sp, #12]
 107              		.loc 1 183 3 view .LVU25
 108 005c 039B     		ldr	r3, [sp, #12]
 109              	.LBE7:
 110              		.loc 1 183 3 view .LVU26
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /*Configure GPIO pins : PC13 PC14 PC15 */
 186:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 111              		.loc 1 186 3 view .LVU27
 112              		.loc 1 186 23 is_stmt 0 view .LVU28
 113 005e 4FF46043 		mov	r3, #57344
 114 0062 0493     		str	r3, [sp, #16]
 187:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 115              		.loc 1 187 3 is_stmt 1 view .LVU29
 116              		.loc 1 187 24 is_stmt 0 view .LVU30
 117 0064 0324     		movs	r4, #3
 118 0066 0594     		str	r4, [sp, #20]
 188:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 119              		.loc 1 188 3 is_stmt 1 view .LVU31
 120 0068 04A9     		add	r1, sp, #16
 121 006a 1148     		ldr	r0, .L3
 122 006c FFF7FEFF 		bl	HAL_GPIO_Init
 123              	.LVL0:
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   /*Configure GPIO pins : PD0 PD1 */
 191:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 124              		.loc 1 191 3 view .LVU32
 125              		.loc 1 191 23 is_stmt 0 view .LVU33
 126 0070 0494     		str	r4, [sp, #16]
 192:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 127              		.loc 1 192 3 is_stmt 1 view .LVU34
 128              		.loc 1 192 24 is_stmt 0 view .LVU35
 129 0072 0594     		str	r4, [sp, #20]
 193:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 130              		.loc 1 193 3 is_stmt 1 view .LVU36
 131 0074 04A9     		add	r1, sp, #16
 132 0076 0F48     		ldr	r0, .L3+4
 133 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 134              	.LVL1:
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   /*Configure GPIO pins : PA0 PA1 PA2 PA3
 196:Core/Src/main.c ****                            PA4 PA5 PA6 PA7
 197:Core/Src/main.c ****                            PA8 PA9 PA10 PA11
 198:Core/Src/main.c ****                            PA12 PA15 */
 199:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 135              		.loc 1 199 3 view .LVU37
 136              		.loc 1 199 23 is_stmt 0 view .LVU38
 137 007c 49F6FF73 		movw	r3, #40959
 138 0080 0493     		str	r3, [sp, #16]
 200:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 201:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 202:Core/Src/main.c ****                           |GPIO_PIN_12|GPIO_PIN_15;
 203:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
ARM GAS  /tmp/cc6fvNvz.s 			page 7


 139              		.loc 1 203 3 is_stmt 1 view .LVU39
 140              		.loc 1 203 24 is_stmt 0 view .LVU40
 141 0082 0594     		str	r4, [sp, #20]
 204:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 142              		.loc 1 204 3 is_stmt 1 view .LVU41
 143 0084 04A9     		add	r1, sp, #16
 144 0086 0C48     		ldr	r0, .L3+8
 145 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 146              	.LVL2:
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB10
 207:Core/Src/main.c ****                            PB11 PB12 PB13 PB14
 208:Core/Src/main.c ****                            PB15 PB3 PB4 PB5
 209:Core/Src/main.c ****                            PB6 PB7 PB8 PB9 */
 210:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 147              		.loc 1 210 3 view .LVU42
 148              		.loc 1 210 23 is_stmt 0 view .LVU43
 149 008c 4FF6FF73 		movw	r3, #65535
 150 0090 0493     		str	r3, [sp, #16]
 211:Core/Src/main.c ****                           |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 212:Core/Src/main.c ****                           |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 213:Core/Src/main.c ****                           |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 214:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 151              		.loc 1 214 3 is_stmt 1 view .LVU44
 152              		.loc 1 214 24 is_stmt 0 view .LVU45
 153 0092 0594     		str	r4, [sp, #20]
 215:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 154              		.loc 1 215 3 is_stmt 1 view .LVU46
 155 0094 04A9     		add	r1, sp, #16
 156 0096 0948     		ldr	r0, .L3+12
 157 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 158              	.LVL3:
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   /*Configure peripheral I/O remapping */
 218:Core/Src/main.c ****   __HAL_AFIO_REMAP_PD01_ENABLE();
 159              		.loc 1 218 3 view .LVU47
 160              	.LBB8:
 161              		.loc 1 218 3 view .LVU48
 162 009c 084A     		ldr	r2, .L3+16
 163 009e 5368     		ldr	r3, [r2, #4]
 164              	.LVL4:
 165              		.loc 1 218 3 view .LVU49
 166              		.loc 1 218 3 view .LVU50
 167 00a0 43F0E063 		orr	r3, r3, #117440512
 168              	.LVL5:
 169              		.loc 1 218 3 is_stmt 0 view .LVU51
 170 00a4 43F40043 		orr	r3, r3, #32768
 171              	.LVL6:
 172              		.loc 1 218 3 is_stmt 1 view .LVU52
 173 00a8 5360     		str	r3, [r2, #4]
 174              	.LBE8:
 175              		.loc 1 218 3 view .LVU53
 219:Core/Src/main.c **** 
 220:Core/Src/main.c **** }
 176              		.loc 1 220 1 is_stmt 0 view .LVU54
 177 00aa 08B0     		add	sp, sp, #32
 178              	.LCFI2:
ARM GAS  /tmp/cc6fvNvz.s 			page 8


 179              		.cfi_def_cfa_offset 8
 180              		@ sp needed
 181 00ac 10BD     		pop	{r4, pc}
 182              	.L4:
 183 00ae 00BF     		.align	2
 184              	.L3:
 185 00b0 00100140 		.word	1073811456
 186 00b4 00140140 		.word	1073812480
 187 00b8 00080140 		.word	1073809408
 188 00bc 000C0140 		.word	1073810432
 189 00c0 00000140 		.word	1073807360
 190              		.cfi_endproc
 191              	.LFE72:
 193              		.section	.text.StartDefaultTask,"ax",%progbits
 194              		.align	1
 195              		.global	StartDefaultTask
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 200              	StartDefaultTask:
 201              	.LFB73:
 221:Core/Src/main.c **** 
 222:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 223:Core/Src/main.c **** 
 224:Core/Src/main.c **** /* USER CODE END 4 */
 225:Core/Src/main.c **** 
 226:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 227:Core/Src/main.c **** /**
 228:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 229:Core/Src/main.c ****   * @param  argument: Not used
 230:Core/Src/main.c ****   * @retval None
 231:Core/Src/main.c ****   */
 232:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 233:Core/Src/main.c **** void StartDefaultTask(void const * argument)
 234:Core/Src/main.c **** {
 202              		.loc 1 234 1 is_stmt 1 view -0
 203              		.cfi_startproc
 204              		@ Volatile: function does not return.
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              	.LVL7:
 208              		.loc 1 234 1 is_stmt 0 view .LVU56
 209 0000 08B5     		push	{r3, lr}
 210              	.LCFI3:
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 3, -8
 213              		.cfi_offset 14, -4
 214              	.LVL8:
 215              	.L6:
 235:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 236:Core/Src/main.c ****   /* Infinite loop */
 237:Core/Src/main.c ****   for(;;)
 216              		.loc 1 237 3 is_stmt 1 discriminator 1 view .LVU57
 238:Core/Src/main.c ****   {
 239:Core/Src/main.c ****     osDelay(1);
 217              		.loc 1 239 5 discriminator 1 view .LVU58
 218 0002 0120     		movs	r0, #1
ARM GAS  /tmp/cc6fvNvz.s 			page 9


 219 0004 FFF7FEFF 		bl	osDelay
 220              	.LVL9:
 237:Core/Src/main.c ****   {
 221              		.loc 1 237 8 discriminator 1 view .LVU59
 222 0008 FBE7     		b	.L6
 223              		.cfi_endproc
 224              	.LFE73:
 226              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 227              		.align	1
 228              		.global	HAL_TIM_PeriodElapsedCallback
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 233              	HAL_TIM_PeriodElapsedCallback:
 234              	.LVL10:
 235              	.LFB74:
 240:Core/Src/main.c ****   }
 241:Core/Src/main.c ****   /* USER CODE END 5 */
 242:Core/Src/main.c **** }
 243:Core/Src/main.c **** 
 244:Core/Src/main.c **** /**
 245:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 246:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 247:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 248:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 249:Core/Src/main.c ****   * @param  htim : TIM handle
 250:Core/Src/main.c ****   * @retval None
 251:Core/Src/main.c ****   */
 252:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 253:Core/Src/main.c **** {
 236              		.loc 1 253 1 view -0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              		.loc 1 253 1 is_stmt 0 view .LVU61
 241 0000 08B5     		push	{r3, lr}
 242              	.LCFI4:
 243              		.cfi_def_cfa_offset 8
 244              		.cfi_offset 3, -8
 245              		.cfi_offset 14, -4
 254:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 257:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 246              		.loc 1 257 3 is_stmt 1 view .LVU62
 247              		.loc 1 257 11 is_stmt 0 view .LVU63
 248 0002 0268     		ldr	r2, [r0]
 249              		.loc 1 257 6 view .LVU64
 250 0004 034B     		ldr	r3, .L12
 251 0006 9A42     		cmp	r2, r3
 252 0008 00D0     		beq	.L11
 253              	.LVL11:
 254              	.L8:
 258:Core/Src/main.c ****     HAL_IncTick();
 259:Core/Src/main.c ****   }
 260:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 261:Core/Src/main.c **** 
ARM GAS  /tmp/cc6fvNvz.s 			page 10


 262:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 263:Core/Src/main.c **** }
 255              		.loc 1 263 1 view .LVU65
 256 000a 08BD     		pop	{r3, pc}
 257              	.LVL12:
 258              	.L11:
 258:Core/Src/main.c ****     HAL_IncTick();
 259              		.loc 1 258 5 is_stmt 1 view .LVU66
 260 000c FFF7FEFF 		bl	HAL_IncTick
 261              	.LVL13:
 262              		.loc 1 263 1 is_stmt 0 view .LVU67
 263 0010 FBE7     		b	.L8
 264              	.L13:
 265 0012 00BF     		.align	2
 266              	.L12:
 267 0014 002C0140 		.word	1073818624
 268              		.cfi_endproc
 269              	.LFE74:
 271              		.section	.text.Error_Handler,"ax",%progbits
 272              		.align	1
 273              		.global	Error_Handler
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 278              	Error_Handler:
 279              	.LFB75:
 264:Core/Src/main.c **** 
 265:Core/Src/main.c **** /**
 266:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 267:Core/Src/main.c ****   * @retval None
 268:Core/Src/main.c ****   */
 269:Core/Src/main.c **** void Error_Handler(void)
 270:Core/Src/main.c **** {
 280              		.loc 1 270 1 is_stmt 1 view -0
 281              		.cfi_startproc
 282              		@ Volatile: function does not return.
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              		@ link register save eliminated.
 271:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 272:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 273:Core/Src/main.c ****   __disable_irq();
 286              		.loc 1 273 3 view .LVU69
 287              	.LBB9:
 288              	.LBI9:
 289              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/cc6fvNvz.s 			page 11


  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
ARM GAS  /tmp/cc6fvNvz.s 			page 12


  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
ARM GAS  /tmp/cc6fvNvz.s 			page 13


 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 290              		.loc 2 140 27 view .LVU70
 291              	.LBB10:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 292              		.loc 2 142 3 view .LVU71
 293              		.syntax unified
 294              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 295 0000 72B6     		cpsid i
 296              	@ 0 "" 2
 297              		.thumb
 298              		.syntax unified
 299              	.L15:
 300              	.LBE10:
 301              	.LBE9:
 274:Core/Src/main.c ****   while (1)
 302              		.loc 1 274 3 discriminator 1 view .LVU72
 275:Core/Src/main.c ****   {
 276:Core/Src/main.c ****   }
 303              		.loc 1 276 3 discriminator 1 view .LVU73
 274:Core/Src/main.c ****   while (1)
 304              		.loc 1 274 9 discriminator 1 view .LVU74
 305 0002 FEE7     		b	.L15
 306              		.cfi_endproc
 307              	.LFE75:
 309              		.section	.text.SystemClock_Config,"ax",%progbits
 310              		.align	1
 311              		.global	SystemClock_Config
 312              		.syntax unified
 313              		.thumb
 314              		.thumb_func
 316              	SystemClock_Config:
 317              	.LFB71:
 140:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 318              		.loc 1 140 1 view -0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 64
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322 0000 00B5     		push	{lr}
 323              	.LCFI5:
 324              		.cfi_def_cfa_offset 4
 325              		.cfi_offset 14, -4
 326 0002 91B0     		sub	sp, sp, #68
ARM GAS  /tmp/cc6fvNvz.s 			page 14


 327              	.LCFI6:
 328              		.cfi_def_cfa_offset 72
 141:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 329              		.loc 1 141 3 view .LVU76
 141:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 330              		.loc 1 141 22 is_stmt 0 view .LVU77
 331 0004 2822     		movs	r2, #40
 332 0006 0021     		movs	r1, #0
 333 0008 06A8     		add	r0, sp, #24
 334 000a FFF7FEFF 		bl	memset
 335              	.LVL14:
 142:Core/Src/main.c **** 
 336              		.loc 1 142 3 is_stmt 1 view .LVU78
 142:Core/Src/main.c **** 
 337              		.loc 1 142 22 is_stmt 0 view .LVU79
 338 000e 0023     		movs	r3, #0
 339 0010 0193     		str	r3, [sp, #4]
 340 0012 0293     		str	r3, [sp, #8]
 341 0014 0393     		str	r3, [sp, #12]
 342 0016 0493     		str	r3, [sp, #16]
 343 0018 0593     		str	r3, [sp, #20]
 147:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 344              		.loc 1 147 3 is_stmt 1 view .LVU80
 147:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 345              		.loc 1 147 36 is_stmt 0 view .LVU81
 346 001a 0223     		movs	r3, #2
 347 001c 0693     		str	r3, [sp, #24]
 148:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 348              		.loc 1 148 3 is_stmt 1 view .LVU82
 148:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 349              		.loc 1 148 30 is_stmt 0 view .LVU83
 350 001e 0123     		movs	r3, #1
 351 0020 0A93     		str	r3, [sp, #40]
 149:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 352              		.loc 1 149 3 is_stmt 1 view .LVU84
 149:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 353              		.loc 1 149 41 is_stmt 0 view .LVU85
 354 0022 1023     		movs	r3, #16
 355 0024 0B93     		str	r3, [sp, #44]
 150:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 356              		.loc 1 150 3 is_stmt 1 view .LVU86
 151:Core/Src/main.c ****   {
 357              		.loc 1 151 3 view .LVU87
 151:Core/Src/main.c ****   {
 358              		.loc 1 151 7 is_stmt 0 view .LVU88
 359 0026 06A8     		add	r0, sp, #24
 360 0028 FFF7FEFF 		bl	HAL_RCC_OscConfig
 361              	.LVL15:
 151:Core/Src/main.c ****   {
 362              		.loc 1 151 6 view .LVU89
 363 002c 68B9     		cbnz	r0, .L20
 157:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 364              		.loc 1 157 3 is_stmt 1 view .LVU90
 157:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 365              		.loc 1 157 31 is_stmt 0 view .LVU91
 366 002e 0F23     		movs	r3, #15
 367 0030 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/cc6fvNvz.s 			page 15


 159:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 368              		.loc 1 159 3 is_stmt 1 view .LVU92
 159:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 369              		.loc 1 159 34 is_stmt 0 view .LVU93
 370 0032 0021     		movs	r1, #0
 371 0034 0291     		str	r1, [sp, #8]
 160:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 372              		.loc 1 160 3 is_stmt 1 view .LVU94
 160:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 373              		.loc 1 160 35 is_stmt 0 view .LVU95
 374 0036 0391     		str	r1, [sp, #12]
 161:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 375              		.loc 1 161 3 is_stmt 1 view .LVU96
 161:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 376              		.loc 1 161 36 is_stmt 0 view .LVU97
 377 0038 0491     		str	r1, [sp, #16]
 162:Core/Src/main.c **** 
 378              		.loc 1 162 3 is_stmt 1 view .LVU98
 162:Core/Src/main.c **** 
 379              		.loc 1 162 36 is_stmt 0 view .LVU99
 380 003a 0591     		str	r1, [sp, #20]
 164:Core/Src/main.c ****   {
 381              		.loc 1 164 3 is_stmt 1 view .LVU100
 164:Core/Src/main.c ****   {
 382              		.loc 1 164 7 is_stmt 0 view .LVU101
 383 003c 01A8     		add	r0, sp, #4
 384 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 385              	.LVL16:
 164:Core/Src/main.c ****   {
 386              		.loc 1 164 6 view .LVU102
 387 0042 20B9     		cbnz	r0, .L21
 168:Core/Src/main.c **** 
 388              		.loc 1 168 1 view .LVU103
 389 0044 11B0     		add	sp, sp, #68
 390              	.LCFI7:
 391              		.cfi_remember_state
 392              		.cfi_def_cfa_offset 4
 393              		@ sp needed
 394 0046 5DF804FB 		ldr	pc, [sp], #4
 395              	.L20:
 396              	.LCFI8:
 397              		.cfi_restore_state
 153:Core/Src/main.c ****   }
 398              		.loc 1 153 5 is_stmt 1 view .LVU104
 399 004a FFF7FEFF 		bl	Error_Handler
 400              	.LVL17:
 401              	.L21:
 166:Core/Src/main.c ****   }
 402              		.loc 1 166 5 view .LVU105
 403 004e FFF7FEFF 		bl	Error_Handler
 404              	.LVL18:
 405              		.cfi_endproc
 406              	.LFE71:
 408              		.section	.text.main,"ax",%progbits
 409              		.align	1
 410              		.global	main
 411              		.syntax unified
ARM GAS  /tmp/cc6fvNvz.s 			page 16


 412              		.thumb
 413              		.thumb_func
 415              	main:
 416              	.LFB70:
  68:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 417              		.loc 1 68 1 view -0
 418              		.cfi_startproc
 419              		@ Volatile: function does not return.
 420              		@ args = 0, pretend = 0, frame = 32
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422 0000 00B5     		push	{lr}
 423              	.LCFI9:
 424              		.cfi_def_cfa_offset 4
 425              		.cfi_offset 14, -4
 426 0002 89B0     		sub	sp, sp, #36
 427              	.LCFI10:
 428              		.cfi_def_cfa_offset 40
  76:Core/Src/main.c **** 
 429              		.loc 1 76 3 view .LVU107
 430 0004 FFF7FEFF 		bl	HAL_Init
 431              	.LVL19:
  83:Core/Src/main.c **** 
 432              		.loc 1 83 3 view .LVU108
 433 0008 FFF7FEFF 		bl	SystemClock_Config
 434              	.LVL20:
  90:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 435              		.loc 1 90 3 view .LVU109
 436 000c FFF7FEFF 		bl	MX_GPIO_Init
 437              	.LVL21:
 113:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 438              		.loc 1 113 3 view .LVU110
 439 0010 0DF1040C 		add	ip, sp, #4
 440 0014 084C     		ldr	r4, .L25
 441 0016 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 442 0018 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 443 001c 94E80700 		ldm	r4, {r0, r1, r2}
 444 0020 8CE80700 		stm	ip, {r0, r1, r2}
 114:Core/Src/main.c **** 
 445              		.loc 1 114 3 view .LVU111
 114:Core/Src/main.c **** 
 446              		.loc 1 114 23 is_stmt 0 view .LVU112
 447 0024 0021     		movs	r1, #0
 448 0026 01A8     		add	r0, sp, #4
 449 0028 FFF7FEFF 		bl	osThreadCreate
 450              	.LVL22:
 114:Core/Src/main.c **** 
 451              		.loc 1 114 21 view .LVU113
 452 002c 034B     		ldr	r3, .L25+4
 453 002e 1860     		str	r0, [r3]
 121:Core/Src/main.c **** 
 454              		.loc 1 121 3 is_stmt 1 view .LVU114
 455 0030 FFF7FEFF 		bl	osKernelStart
 456              	.LVL23:
 457              	.L23:
 126:Core/Src/main.c ****   {
 458              		.loc 1 126 3 discriminator 1 view .LVU115
 131:Core/Src/main.c ****   /* USER CODE END 3 */
ARM GAS  /tmp/cc6fvNvz.s 			page 17


 459              		.loc 1 131 3 discriminator 1 view .LVU116
 126:Core/Src/main.c ****   {
 460              		.loc 1 126 9 discriminator 1 view .LVU117
 461 0034 FEE7     		b	.L23
 462              	.L26:
 463 0036 00BF     		.align	2
 464              	.L25:
 465 0038 00000000 		.word	.LANCHOR0
 466 003c 00000000 		.word	.LANCHOR1
 467              		.cfi_endproc
 468              	.LFE70:
 470              		.section	.text.assert_failed,"ax",%progbits
 471              		.align	1
 472              		.global	assert_failed
 473              		.syntax unified
 474              		.thumb
 475              		.thumb_func
 477              	assert_failed:
 478              	.LVL24:
 479              	.LFB76:
 277:Core/Src/main.c ****   /* USER CODE END Error_Handler_Debug */
 278:Core/Src/main.c **** }
 279:Core/Src/main.c **** 
 280:Core/Src/main.c **** #ifdef  USE_FULL_ASSERT
 281:Core/Src/main.c **** /**
 282:Core/Src/main.c ****   * @brief  Reports the name of the source file and the source line number
 283:Core/Src/main.c ****   *         where the assert_param error has occurred.
 284:Core/Src/main.c ****   * @param  file: pointer to the source file name
 285:Core/Src/main.c ****   * @param  line: assert_param error line source number
 286:Core/Src/main.c ****   * @retval None
 287:Core/Src/main.c ****   */
 288:Core/Src/main.c **** void assert_failed(uint8_t *file, uint32_t line)
 289:Core/Src/main.c **** {
 480              		.loc 1 289 1 view -0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 0
 483              		@ frame_needed = 0, uses_anonymous_args = 0
 484              		@ link register save eliminated.
 290:Core/Src/main.c ****   /* USER CODE BEGIN 6 */
 291:Core/Src/main.c ****   /* User can add his own implementation to report the file name and line number,
 292:Core/Src/main.c ****      ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
 293:Core/Src/main.c ****   /* USER CODE END 6 */
 294:Core/Src/main.c **** }
 485              		.loc 1 294 1 view .LVU119
 486 0000 7047     		bx	lr
 487              		.cfi_endproc
 488              	.LFE76:
 490              		.global	defaultTaskHandle
 491              		.section	.rodata
 492              		.align	2
 493              		.set	.LANCHOR0,. + 0
 494              	.LC2:
 495 0000 00000000 		.word	.LC0
 496 0004 00000000 		.word	StartDefaultTask
 497 0008 0000     		.short	0
 498 000a 0000     		.space	2
 499 000c 00000000 		.word	0
ARM GAS  /tmp/cc6fvNvz.s 			page 18


 500 0010 80000000 		.word	128
 501 0014 00000000 		.word	0
 502 0018 00000000 		.word	0
 503              		.section	.bss.defaultTaskHandle,"aw",%nobits
 504              		.align	2
 505              		.set	.LANCHOR1,. + 0
 508              	defaultTaskHandle:
 509 0000 00000000 		.space	4
 510              		.text
 511              	.Letext0:
 512              		.file 3 "/home/joswan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-no
 513              		.file 4 "/home/joswan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-no
 514              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 515              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 516              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 517              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 518              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 519              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 520              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 521              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
 522              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 523              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 524              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 525              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 526              		.file 17 "<built-in>"
ARM GAS  /tmp/cc6fvNvz.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc6fvNvz.s:15     .rodata.str1.4:0000000000000000 $d
     /tmp/cc6fvNvz.s:22     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc6fvNvz.s:27     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc6fvNvz.s:185    .text.MX_GPIO_Init:00000000000000b0 $d
     /tmp/cc6fvNvz.s:194    .text.StartDefaultTask:0000000000000000 $t
     /tmp/cc6fvNvz.s:200    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/cc6fvNvz.s:227    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc6fvNvz.s:233    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc6fvNvz.s:267    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/cc6fvNvz.s:272    .text.Error_Handler:0000000000000000 $t
     /tmp/cc6fvNvz.s:278    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc6fvNvz.s:310    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc6fvNvz.s:316    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc6fvNvz.s:409    .text.main:0000000000000000 $t
     /tmp/cc6fvNvz.s:415    .text.main:0000000000000000 main
     /tmp/cc6fvNvz.s:465    .text.main:0000000000000038 $d
     /tmp/cc6fvNvz.s:471    .text.assert_failed:0000000000000000 $t
     /tmp/cc6fvNvz.s:477    .text.assert_failed:0000000000000000 assert_failed
     /tmp/cc6fvNvz.s:508    .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/cc6fvNvz.s:492    .rodata:0000000000000000 $d
     /tmp/cc6fvNvz.s:504    .bss.defaultTaskHandle:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_Init
osDelay
HAL_IncTick
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osThreadCreate
osKernelStart
